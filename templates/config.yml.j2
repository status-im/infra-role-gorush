---
core:
  enabled: true                  # enable httpd server
  address: "0.0.0.0"             # ip address to bind (default: any)
  shutdown_timeout: 30           # default is 30 second
  port: "{{ gorush_cont_port }}" # http REST API
  worker_num: 0                  # default worker number is runtime.NumCPU()
  queue_num: 0                   # default queue number is 8192
  max_notification: 100
  sync: false                    # set true if you need get error message from fail push notification in API response. It only works when the queue engine is local.
  feedback_hook_url: ""          # set a hook url if you need get error message asynchronously from fail push notification in API response.
  feedback_timeout: 10           # seconds
  mode: "release"
  ssl: false
  pid:
    enabled: false
  auto_tls:
    enabled: false

grpc:
  enabled: false # enable gRPC server
  port: 9000
api:
  push_uri: "/api/push"
  stat_go_uri: "/api/stat/go"
  stat_app_uri: "/api/stat/app"
  config_uri: "/api/config"
  sys_stat_uri: "/sys/stats"
  metric_uri: "/metrics"
  health_uri: "/healthz"

android:
  enabled: true
  apikey: "{{ gorush_android_firebase_key | mandatory }}"
  max_retry: 0 # resend fail notification, default value zero is disabled

queue:
  # support "local", "nsq", "nats" and "redis" default value is "local"
  engine: "local"

ios:
  enabled: true
  key_path: "/conf/key.p8"
  key_type: "p8"
  password: "" # certificate password, default as empty string.
  production: true
  max_concurrent_pushes: 100 # just for push ios notification
  max_retry: 0 # resend fail notification, default value zero is disabled
  key_id: "{{ gorush_ios_apple_key_id | mandatory }}"   # KeyID from developer account (Certificates, Identifiers & Profiles -> Keys)
  team_id: "{{ gorush_ios_apple_team_id | mandatory }}" # TeamID from developer account (View Account -> Membership)

log:
  format: "json"
  access_log: "stdout"
  access_level: "debug"
  error_log: "stderr"
  error_level: "error"
  hide_token: true

stat:
  # supports memory, redis, boltdb, buntdb or leveldb
  engine: "leveldb"
  leveldb:
    path: "level.db"
